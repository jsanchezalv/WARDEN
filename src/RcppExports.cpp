// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// luck_adj_rcpp
NumericVector luck_adj_rcpp(NumericVector prevsurv, NumericVector cursurv, NumericVector luck, bool condq);
RcppExport SEXP _WARDEN_luck_adj_rcpp(SEXP prevsurvSEXP, SEXP cursurvSEXP, SEXP luckSEXP, SEXP condqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prevsurv(prevsurvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cursurv(cursurvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type luck(luckSEXP);
    Rcpp::traits::input_parameter< bool >::type condq(condqSEXP);
    rcpp_result_gen = Rcpp::wrap(luck_adj_rcpp(prevsurv, cursurv, luck, condq));
    return rcpp_result_gen;
END_RCPP
}
// qcond_exp_cpp
NumericVector qcond_exp_cpp(NumericVector rnd, NumericVector rate);
RcppExport SEXP _WARDEN_qcond_exp_cpp(SEXP rndSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_exp_cpp(rnd, rate));
    return rcpp_result_gen;
END_RCPP
}
// qcond_weibull_cpp
NumericVector qcond_weibull_cpp(NumericVector rnd, NumericVector shape, NumericVector scale, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_weibull_cpp(SEXP rndSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_weibull_cpp(rnd, shape, scale, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_weibullPH_cpp
NumericVector qcond_weibullPH_cpp(NumericVector rnd, NumericVector shape, NumericVector scale, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_weibullPH_cpp(SEXP rndSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_weibullPH_cpp(rnd, shape, scale, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_llogis_cpp
NumericVector qcond_llogis_cpp(NumericVector rnd, NumericVector shape, NumericVector scale, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_llogis_cpp(SEXP rndSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_llogis_cpp(rnd, shape, scale, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_gompertz_cpp
NumericVector qcond_gompertz_cpp(NumericVector rnd, NumericVector shape, NumericVector rate, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_gompertz_cpp(SEXP rndSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_gompertz_cpp(rnd, shape, rate, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_lnorm_cpp
NumericVector qcond_lnorm_cpp(NumericVector rnd, NumericVector meanlog, NumericVector sdlog, NumericVector lower_bound, NumericVector s_obs);
RcppExport SEXP _WARDEN_qcond_lnorm_cpp(SEXP rndSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP, SEXP lower_boundSEXP, SEXP s_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sdlog(sdlogSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_obs(s_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_lnorm_cpp(rnd, meanlog, sdlog, lower_bound, s_obs));
    return rcpp_result_gen;
END_RCPP
}
// qcond_norm_cpp
NumericVector qcond_norm_cpp(NumericVector rnd, NumericVector mean, NumericVector sd, NumericVector lower_bound, NumericVector s_obs);
RcppExport SEXP _WARDEN_qcond_norm_cpp(SEXP rndSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lower_boundSEXP, SEXP s_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_obs(s_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_norm_cpp(rnd, mean, sd, lower_bound, s_obs));
    return rcpp_result_gen;
END_RCPP
}
// qcond_gamma_cpp
NumericVector qcond_gamma_cpp(NumericVector rnd, NumericVector shape, NumericVector rate, NumericVector lower_bound, NumericVector s_obs);
RcppExport SEXP _WARDEN_qcond_gamma_cpp(SEXP rndSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP lower_boundSEXP, SEXP s_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_obs(s_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_gamma_cpp(rnd, shape, rate, lower_bound, s_obs));
    return rcpp_result_gen;
END_RCPP
}
// qtimecov_cpp
List qtimecov_cpp(double luck, Function a_fun, RObject b_fun, std::string dist, double dt, double max_time, double start_time);
RcppExport SEXP _WARDEN_qtimecov_cpp(SEXP luckSEXP, SEXP a_funSEXP, SEXP b_funSEXP, SEXP distSEXP, SEXP dtSEXP, SEXP max_timeSEXP, SEXP start_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type luck(luckSEXP);
    Rcpp::traits::input_parameter< Function >::type a_fun(a_funSEXP);
    Rcpp::traits::input_parameter< RObject >::type b_fun(b_funSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< double >::type start_time(start_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(qtimecov_cpp(luck, a_fun, b_fun, dist, dt, max_time, start_time));
    return rcpp_result_gen;
END_RCPP
}
// disc_cycle_rcpp
NumericVector disc_cycle_rcpp(double lcldr, NumericVector lclprvtime, NumericVector cyclelength, NumericVector lclcurtime, NumericVector lclval, NumericVector starttime, Nullable<NumericVector> max_cycles);
RcppExport SEXP _WARDEN_disc_cycle_rcpp(SEXP lcldrSEXP, SEXP lclprvtimeSEXP, SEXP cyclelengthSEXP, SEXP lclcurtimeSEXP, SEXP lclvalSEXP, SEXP starttimeSEXP, SEXP max_cyclesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lcldr(lcldrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclprvtime(lclprvtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cyclelength(cyclelengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclcurtime(lclcurtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclval(lclvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type starttime(starttimeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type max_cycles(max_cyclesSEXP);
    rcpp_result_gen = Rcpp::wrap(disc_cycle_rcpp(lcldr, lclprvtime, cyclelength, lclcurtime, lclval, starttime, max_cycles));
    return rcpp_result_gen;
END_RCPP
}
// disc_instant_rcpp
NumericVector disc_instant_rcpp(double lcldr, NumericVector lclcurtime, NumericVector lclval);
RcppExport SEXP _WARDEN_disc_instant_rcpp(SEXP lcldrSEXP, SEXP lclcurtimeSEXP, SEXP lclvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lcldr(lcldrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclcurtime(lclcurtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclval(lclvalSEXP);
    rcpp_result_gen = Rcpp::wrap(disc_instant_rcpp(lcldr, lclcurtime, lclval));
    return rcpp_result_gen;
END_RCPP
}
// disc_ongoing_rcpp
NumericVector disc_ongoing_rcpp(double lcldr, NumericVector lclprvtime, NumericVector lclcurtime, NumericVector lclval);
RcppExport SEXP _WARDEN_disc_ongoing_rcpp(SEXP lcldrSEXP, SEXP lclprvtimeSEXP, SEXP lclcurtimeSEXP, SEXP lclvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lcldr(lcldrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclprvtime(lclprvtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclcurtime(lclcurtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclval(lclvalSEXP);
    rcpp_result_gen = Rcpp::wrap(disc_ongoing_rcpp(lcldr, lclprvtime, lclcurtime, lclval));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WARDEN_luck_adj_rcpp", (DL_FUNC) &_WARDEN_luck_adj_rcpp, 4},
    {"_WARDEN_qcond_exp_cpp", (DL_FUNC) &_WARDEN_qcond_exp_cpp, 2},
    {"_WARDEN_qcond_weibull_cpp", (DL_FUNC) &_WARDEN_qcond_weibull_cpp, 4},
    {"_WARDEN_qcond_weibullPH_cpp", (DL_FUNC) &_WARDEN_qcond_weibullPH_cpp, 4},
    {"_WARDEN_qcond_llogis_cpp", (DL_FUNC) &_WARDEN_qcond_llogis_cpp, 4},
    {"_WARDEN_qcond_gompertz_cpp", (DL_FUNC) &_WARDEN_qcond_gompertz_cpp, 4},
    {"_WARDEN_qcond_lnorm_cpp", (DL_FUNC) &_WARDEN_qcond_lnorm_cpp, 5},
    {"_WARDEN_qcond_norm_cpp", (DL_FUNC) &_WARDEN_qcond_norm_cpp, 5},
    {"_WARDEN_qcond_gamma_cpp", (DL_FUNC) &_WARDEN_qcond_gamma_cpp, 5},
    {"_WARDEN_qtimecov_cpp", (DL_FUNC) &_WARDEN_qtimecov_cpp, 7},
    {"_WARDEN_disc_cycle_rcpp", (DL_FUNC) &_WARDEN_disc_cycle_rcpp, 7},
    {"_WARDEN_disc_instant_rcpp", (DL_FUNC) &_WARDEN_disc_instant_rcpp, 3},
    {"_WARDEN_disc_ongoing_rcpp", (DL_FUNC) &_WARDEN_disc_ongoing_rcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_WARDEN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
