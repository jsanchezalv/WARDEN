// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// luck_adj
NumericVector luck_adj(NumericVector prevsurv, NumericVector cursurv, NumericVector luck, bool condq);
RcppExport SEXP _WARDEN_luck_adj(SEXP prevsurvSEXP, SEXP cursurvSEXP, SEXP luckSEXP, SEXP condqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prevsurv(prevsurvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cursurv(cursurvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type luck(luckSEXP);
    Rcpp::traits::input_parameter< bool >::type condq(condqSEXP);
    rcpp_result_gen = Rcpp::wrap(luck_adj(prevsurv, cursurv, luck, condq));
    return rcpp_result_gen;
END_RCPP
}
// qcond_exp
NumericVector qcond_exp(NumericVector rnd, NumericVector rate);
RcppExport SEXP _WARDEN_qcond_exp(SEXP rndSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_exp(rnd, rate));
    return rcpp_result_gen;
END_RCPP
}
// qcond_weibull
NumericVector qcond_weibull(NumericVector rnd, NumericVector shape, NumericVector scale, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_weibull(SEXP rndSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_weibull(rnd, shape, scale, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_weibullPH
NumericVector qcond_weibullPH(NumericVector rnd, NumericVector shape, NumericVector scale, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_weibullPH(SEXP rndSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_weibullPH(rnd, shape, scale, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_llogis
NumericVector qcond_llogis(NumericVector rnd, NumericVector shape, NumericVector scale, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_llogis(SEXP rndSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_llogis(rnd, shape, scale, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_gompertz
NumericVector qcond_gompertz(NumericVector rnd, NumericVector shape, NumericVector rate, NumericVector lower_bound);
RcppExport SEXP _WARDEN_qcond_gompertz(SEXP rndSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP lower_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_gompertz(rnd, shape, rate, lower_bound));
    return rcpp_result_gen;
END_RCPP
}
// qcond_lnorm
NumericVector qcond_lnorm(NumericVector rnd, NumericVector meanlog, NumericVector sdlog, NumericVector lower_bound, NumericVector s_obs);
RcppExport SEXP _WARDEN_qcond_lnorm(SEXP rndSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP, SEXP lower_boundSEXP, SEXP s_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sdlog(sdlogSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_obs(s_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_lnorm(rnd, meanlog, sdlog, lower_bound, s_obs));
    return rcpp_result_gen;
END_RCPP
}
// qcond_norm
NumericVector qcond_norm(NumericVector rnd, NumericVector mean, NumericVector sd, NumericVector lower_bound, NumericVector s_obs);
RcppExport SEXP _WARDEN_qcond_norm(SEXP rndSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lower_boundSEXP, SEXP s_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_obs(s_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_norm(rnd, mean, sd, lower_bound, s_obs));
    return rcpp_result_gen;
END_RCPP
}
// qcond_gamma
NumericVector qcond_gamma(NumericVector rnd, NumericVector shape, NumericVector rate, NumericVector lower_bound, NumericVector s_obs);
RcppExport SEXP _WARDEN_qcond_gamma(SEXP rndSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP lower_boundSEXP, SEXP s_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rnd(rndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_obs(s_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcond_gamma(rnd, shape, rate, lower_bound, s_obs));
    return rcpp_result_gen;
END_RCPP
}
// qtimecov
List qtimecov(double luck, Function a_fun, RObject b_fun, std::string dist, double dt, double max_time, double start_time);
RcppExport SEXP _WARDEN_qtimecov(SEXP luckSEXP, SEXP a_funSEXP, SEXP b_funSEXP, SEXP distSEXP, SEXP dtSEXP, SEXP max_timeSEXP, SEXP start_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type luck(luckSEXP);
    Rcpp::traits::input_parameter< Function >::type a_fun(a_funSEXP);
    Rcpp::traits::input_parameter< RObject >::type b_fun(b_funSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< double >::type start_time(start_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(qtimecov(luck, a_fun, b_fun, dist, dt, max_time, start_time));
    return rcpp_result_gen;
END_RCPP
}
// disc_cycle_v
NumericVector disc_cycle_v(double lcldr, NumericVector lclprvtime, NumericVector cyclelength, NumericVector lclcurtime, NumericVector lclval, NumericVector starttime, Nullable<NumericVector> max_cycles);
RcppExport SEXP _WARDEN_disc_cycle_v(SEXP lcldrSEXP, SEXP lclprvtimeSEXP, SEXP cyclelengthSEXP, SEXP lclcurtimeSEXP, SEXP lclvalSEXP, SEXP starttimeSEXP, SEXP max_cyclesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lcldr(lcldrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclprvtime(lclprvtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cyclelength(cyclelengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclcurtime(lclcurtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclval(lclvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type starttime(starttimeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type max_cycles(max_cyclesSEXP);
    rcpp_result_gen = Rcpp::wrap(disc_cycle_v(lcldr, lclprvtime, cyclelength, lclcurtime, lclval, starttime, max_cycles));
    return rcpp_result_gen;
END_RCPP
}
// disc_instant_v
NumericVector disc_instant_v(double lcldr, NumericVector lclcurtime, NumericVector lclval);
RcppExport SEXP _WARDEN_disc_instant_v(SEXP lcldrSEXP, SEXP lclcurtimeSEXP, SEXP lclvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lcldr(lcldrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclcurtime(lclcurtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclval(lclvalSEXP);
    rcpp_result_gen = Rcpp::wrap(disc_instant_v(lcldr, lclcurtime, lclval));
    return rcpp_result_gen;
END_RCPP
}
// disc_ongoing_v
NumericVector disc_ongoing_v(double lcldr, NumericVector lclprvtime, NumericVector lclcurtime, NumericVector lclval);
RcppExport SEXP _WARDEN_disc_ongoing_v(SEXP lcldrSEXP, SEXP lclprvtimeSEXP, SEXP lclcurtimeSEXP, SEXP lclvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lcldr(lcldrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclprvtime(lclprvtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclcurtime(lclcurtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lclval(lclvalSEXP);
    rcpp_result_gen = Rcpp::wrap(disc_ongoing_v(lcldr, lclprvtime, lclcurtime, lclval));
    return rcpp_result_gen;
END_RCPP
}
// queue_create_cpp
SEXP queue_create_cpp(std::vector<std::string> priority_order);
RcppExport SEXP _WARDEN_queue_create_cpp(SEXP priority_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type priority_order(priority_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_create_cpp(priority_order));
    return rcpp_result_gen;
END_RCPP
}
// new_event_cpp
void new_event_cpp(SEXP ptr, int patient_id, NumericVector events);
RcppExport SEXP _WARDEN_new_event_cpp(SEXP ptrSEXP, SEXP patient_idSEXP, SEXP eventsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    new_event_cpp(ptr, patient_id, events);
    return R_NilValue;
END_RCPP
}
// next_event_cpp
List next_event_cpp(SEXP ptr, int n);
RcppExport SEXP _WARDEN_next_event_cpp(SEXP ptrSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(next_event_cpp(ptr, n));
    return rcpp_result_gen;
END_RCPP
}
// next_event_pt_cpp
List next_event_pt_cpp(SEXP ptr, int patient_id, int n);
RcppExport SEXP _WARDEN_next_event_pt_cpp(SEXP ptrSEXP, SEXP patient_idSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(next_event_pt_cpp(ptr, patient_id, n));
    return rcpp_result_gen;
END_RCPP
}
// pop_event_cpp
void pop_event_cpp(SEXP ptr);
RcppExport SEXP _WARDEN_pop_event_cpp(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    pop_event_cpp(ptr);
    return R_NilValue;
END_RCPP
}
// pop_and_return_event_cpp
List pop_and_return_event_cpp(SEXP ptr);
RcppExport SEXP _WARDEN_pop_and_return_event_cpp(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(pop_and_return_event_cpp(ptr));
    return rcpp_result_gen;
END_RCPP
}
// remove_event_cpp
void remove_event_cpp(SEXP ptr, int patient_id, SEXP events);
RcppExport SEXP _WARDEN_remove_event_cpp(SEXP ptrSEXP, SEXP patient_idSEXP, SEXP eventsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< SEXP >::type events(eventsSEXP);
    remove_event_cpp(ptr, patient_id, events);
    return R_NilValue;
END_RCPP
}
// modify_event_cpp
void modify_event_cpp(SEXP ptr, int patient_id, NumericVector events, bool create_if_missing);
RcppExport SEXP _WARDEN_modify_event_cpp(SEXP ptrSEXP, SEXP patient_idSEXP, SEXP eventsSEXP, SEXP create_if_missingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< bool >::type create_if_missing(create_if_missingSEXP);
    modify_event_cpp(ptr, patient_id, events, create_if_missing);
    return R_NilValue;
END_RCPP
}
// queue_empty_cpp
bool queue_empty_cpp(SEXP ptr);
RcppExport SEXP _WARDEN_queue_empty_cpp(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_empty_cpp(ptr));
    return rcpp_result_gen;
END_RCPP
}
// queue_size_cpp
int queue_size_cpp(SEXP ptr);
RcppExport SEXP _WARDEN_queue_size_cpp(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_size_cpp(ptr));
    return rcpp_result_gen;
END_RCPP
}
// has_event_cpp
bool has_event_cpp(SEXP ptr, int patient_id, std::string event_name);
RcppExport SEXP _WARDEN_has_event_cpp(SEXP ptrSEXP, SEXP patient_idSEXP, SEXP event_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< std::string >::type event_name(event_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(has_event_cpp(ptr, patient_id, event_name));
    return rcpp_result_gen;
END_RCPP
}
// get_event_cpp
double get_event_cpp(SEXP ptr, int patient_id, std::string event_name);
RcppExport SEXP _WARDEN_get_event_cpp(SEXP ptrSEXP, SEXP patient_idSEXP, SEXP event_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< std::string >::type event_name(event_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_event_cpp(ptr, patient_id, event_name));
    return rcpp_result_gen;
END_RCPP
}
// create_discrete_resource_cpp
SEXP create_discrete_resource_cpp(int n);
RcppExport SEXP _WARDEN_create_discrete_resource_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(create_discrete_resource_cpp(n));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_size_cpp
int discrete_resource_size_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_size_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_size_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_queue_size_cpp
int discrete_resource_queue_size_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_queue_size_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_queue_size_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_n_free_cpp
int discrete_resource_n_free_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_n_free_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_n_free_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_patients_using_cpp
IntegerVector discrete_resource_patients_using_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_patients_using_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_patients_using_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_patients_using_times_cpp
NumericVector discrete_resource_patients_using_times_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_patients_using_times_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_patients_using_times_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_is_patient_in_queue_cpp
bool discrete_resource_is_patient_in_queue_cpp(SEXP xptr, int patient_id);
RcppExport SEXP _WARDEN_discrete_resource_is_patient_in_queue_cpp(SEXP xptrSEXP, SEXP patient_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_is_patient_in_queue_cpp(xptr, patient_id));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_is_patient_using_cpp
bool discrete_resource_is_patient_using_cpp(SEXP xptr, int patient_id);
RcppExport SEXP _WARDEN_discrete_resource_is_patient_using_cpp(SEXP xptrSEXP, SEXP patient_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_is_patient_using_cpp(xptr, patient_id));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_attempt_block_cpp
bool discrete_resource_attempt_block_cpp(SEXP xptr, int patient_id, int priority, double start_time);
RcppExport SEXP _WARDEN_discrete_resource_attempt_block_cpp(SEXP xptrSEXP, SEXP patient_idSEXP, SEXP prioritySEXP, SEXP start_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< int >::type priority(prioritySEXP);
    Rcpp::traits::input_parameter< double >::type start_time(start_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_attempt_block_cpp(xptr, patient_id, priority, start_time));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_attempt_free_cpp
void discrete_resource_attempt_free_cpp(SEXP xptr, int patient_id, bool remove_all);
RcppExport SEXP _WARDEN_discrete_resource_attempt_free_cpp(SEXP xptrSEXP, SEXP patient_idSEXP, SEXP remove_allSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_all(remove_allSEXP);
    discrete_resource_attempt_free_cpp(xptr, patient_id, remove_all);
    return R_NilValue;
END_RCPP
}
// discrete_resource_attempt_free_if_using_cpp
void discrete_resource_attempt_free_if_using_cpp(SEXP xptr, int patient_id, bool remove_all);
RcppExport SEXP _WARDEN_discrete_resource_attempt_free_if_using_cpp(SEXP xptrSEXP, SEXP patient_idSEXP, SEXP remove_allSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_all(remove_allSEXP);
    discrete_resource_attempt_free_if_using_cpp(xptr, patient_id, remove_all);
    return R_NilValue;
END_RCPP
}
// discrete_resource_next_patient_in_line_cpp
IntegerVector discrete_resource_next_patient_in_line_cpp(SEXP xptr, int n);
RcppExport SEXP _WARDEN_discrete_resource_next_patient_in_line_cpp(SEXP xptrSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_next_patient_in_line_cpp(xptr, n));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_queue_priorities_cpp
IntegerVector discrete_resource_queue_priorities_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_queue_priorities_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_queue_priorities_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_queue_start_times_cpp
NumericVector discrete_resource_queue_start_times_cpp(SEXP xptr);
RcppExport SEXP _WARDEN_discrete_resource_queue_start_times_cpp(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_queue_start_times_cpp(xptr));
    return rcpp_result_gen;
END_RCPP
}
// discrete_resource_modify_priority_cpp
void discrete_resource_modify_priority_cpp(SEXP xptr, int patient_id, int new_priority);
RcppExport SEXP _WARDEN_discrete_resource_modify_priority_cpp(SEXP xptrSEXP, SEXP patient_idSEXP, SEXP new_prioritySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< int >::type new_priority(new_prioritySEXP);
    discrete_resource_modify_priority_cpp(xptr, patient_id, new_priority);
    return R_NilValue;
END_RCPP
}
// discrete_resource_add_resource_cpp
void discrete_resource_add_resource_cpp(SEXP xptr, int n_to_add);
RcppExport SEXP _WARDEN_discrete_resource_add_resource_cpp(SEXP xptrSEXP, SEXP n_to_addSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type n_to_add(n_to_addSEXP);
    discrete_resource_add_resource_cpp(xptr, n_to_add);
    return R_NilValue;
END_RCPP
}
// discrete_resource_remove_resource_cpp
void discrete_resource_remove_resource_cpp(SEXP xptr, int n_to_remove, double current_time);
RcppExport SEXP _WARDEN_discrete_resource_remove_resource_cpp(SEXP xptrSEXP, SEXP n_to_removeSEXP, SEXP current_timeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type n_to_remove(n_to_removeSEXP);
    Rcpp::traits::input_parameter< double >::type current_time(current_timeSEXP);
    discrete_resource_remove_resource_cpp(xptr, n_to_remove, current_time);
    return R_NilValue;
END_RCPP
}
// discrete_resource_clone_xptrs_cpp
Rcpp::List discrete_resource_clone_xptrs_cpp(SEXP wrapper_env, int n);
RcppExport SEXP _WARDEN_discrete_resource_clone_xptrs_cpp(SEXP wrapper_envSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type wrapper_env(wrapper_envSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(discrete_resource_clone_xptrs_cpp(wrapper_env, n));
    return rcpp_result_gen;
END_RCPP
}
// rpoisgamma_rcpp
List rpoisgamma_rcpp(int n, double rate, Nullable<double> theta, double obs_time, Nullable<int> t_reps, Nullable<int> seed, bool return_ind_rate, bool return_df);
RcppExport SEXP _WARDEN_rpoisgamma_rcpp(SEXP nSEXP, SEXP rateSEXP, SEXP thetaSEXP, SEXP obs_timeSEXP, SEXP t_repsSEXP, SEXP seedSEXP, SEXP return_ind_rateSEXP, SEXP return_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type obs_time(obs_timeSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type t_reps(t_repsSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type return_ind_rate(return_ind_rateSEXP);
    Rcpp::traits::input_parameter< bool >::type return_df(return_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(rpoisgamma_rcpp(n, rate, theta, obs_time, t_reps, seed, return_ind_rate, return_df));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WARDEN_luck_adj", (DL_FUNC) &_WARDEN_luck_adj, 4},
    {"_WARDEN_qcond_exp", (DL_FUNC) &_WARDEN_qcond_exp, 2},
    {"_WARDEN_qcond_weibull", (DL_FUNC) &_WARDEN_qcond_weibull, 4},
    {"_WARDEN_qcond_weibullPH", (DL_FUNC) &_WARDEN_qcond_weibullPH, 4},
    {"_WARDEN_qcond_llogis", (DL_FUNC) &_WARDEN_qcond_llogis, 4},
    {"_WARDEN_qcond_gompertz", (DL_FUNC) &_WARDEN_qcond_gompertz, 4},
    {"_WARDEN_qcond_lnorm", (DL_FUNC) &_WARDEN_qcond_lnorm, 5},
    {"_WARDEN_qcond_norm", (DL_FUNC) &_WARDEN_qcond_norm, 5},
    {"_WARDEN_qcond_gamma", (DL_FUNC) &_WARDEN_qcond_gamma, 5},
    {"_WARDEN_qtimecov", (DL_FUNC) &_WARDEN_qtimecov, 7},
    {"_WARDEN_disc_cycle_v", (DL_FUNC) &_WARDEN_disc_cycle_v, 7},
    {"_WARDEN_disc_instant_v", (DL_FUNC) &_WARDEN_disc_instant_v, 3},
    {"_WARDEN_disc_ongoing_v", (DL_FUNC) &_WARDEN_disc_ongoing_v, 4},
    {"_WARDEN_queue_create_cpp", (DL_FUNC) &_WARDEN_queue_create_cpp, 1},
    {"_WARDEN_new_event_cpp", (DL_FUNC) &_WARDEN_new_event_cpp, 3},
    {"_WARDEN_next_event_cpp", (DL_FUNC) &_WARDEN_next_event_cpp, 2},
    {"_WARDEN_next_event_pt_cpp", (DL_FUNC) &_WARDEN_next_event_pt_cpp, 3},
    {"_WARDEN_pop_event_cpp", (DL_FUNC) &_WARDEN_pop_event_cpp, 1},
    {"_WARDEN_pop_and_return_event_cpp", (DL_FUNC) &_WARDEN_pop_and_return_event_cpp, 1},
    {"_WARDEN_remove_event_cpp", (DL_FUNC) &_WARDEN_remove_event_cpp, 3},
    {"_WARDEN_modify_event_cpp", (DL_FUNC) &_WARDEN_modify_event_cpp, 4},
    {"_WARDEN_queue_empty_cpp", (DL_FUNC) &_WARDEN_queue_empty_cpp, 1},
    {"_WARDEN_queue_size_cpp", (DL_FUNC) &_WARDEN_queue_size_cpp, 1},
    {"_WARDEN_has_event_cpp", (DL_FUNC) &_WARDEN_has_event_cpp, 3},
    {"_WARDEN_get_event_cpp", (DL_FUNC) &_WARDEN_get_event_cpp, 3},
    {"_WARDEN_create_discrete_resource_cpp", (DL_FUNC) &_WARDEN_create_discrete_resource_cpp, 1},
    {"_WARDEN_discrete_resource_size_cpp", (DL_FUNC) &_WARDEN_discrete_resource_size_cpp, 1},
    {"_WARDEN_discrete_resource_queue_size_cpp", (DL_FUNC) &_WARDEN_discrete_resource_queue_size_cpp, 1},
    {"_WARDEN_discrete_resource_n_free_cpp", (DL_FUNC) &_WARDEN_discrete_resource_n_free_cpp, 1},
    {"_WARDEN_discrete_resource_patients_using_cpp", (DL_FUNC) &_WARDEN_discrete_resource_patients_using_cpp, 1},
    {"_WARDEN_discrete_resource_patients_using_times_cpp", (DL_FUNC) &_WARDEN_discrete_resource_patients_using_times_cpp, 1},
    {"_WARDEN_discrete_resource_is_patient_in_queue_cpp", (DL_FUNC) &_WARDEN_discrete_resource_is_patient_in_queue_cpp, 2},
    {"_WARDEN_discrete_resource_is_patient_using_cpp", (DL_FUNC) &_WARDEN_discrete_resource_is_patient_using_cpp, 2},
    {"_WARDEN_discrete_resource_attempt_block_cpp", (DL_FUNC) &_WARDEN_discrete_resource_attempt_block_cpp, 4},
    {"_WARDEN_discrete_resource_attempt_free_cpp", (DL_FUNC) &_WARDEN_discrete_resource_attempt_free_cpp, 3},
    {"_WARDEN_discrete_resource_attempt_free_if_using_cpp", (DL_FUNC) &_WARDEN_discrete_resource_attempt_free_if_using_cpp, 3},
    {"_WARDEN_discrete_resource_next_patient_in_line_cpp", (DL_FUNC) &_WARDEN_discrete_resource_next_patient_in_line_cpp, 2},
    {"_WARDEN_discrete_resource_queue_priorities_cpp", (DL_FUNC) &_WARDEN_discrete_resource_queue_priorities_cpp, 1},
    {"_WARDEN_discrete_resource_queue_start_times_cpp", (DL_FUNC) &_WARDEN_discrete_resource_queue_start_times_cpp, 1},
    {"_WARDEN_discrete_resource_modify_priority_cpp", (DL_FUNC) &_WARDEN_discrete_resource_modify_priority_cpp, 3},
    {"_WARDEN_discrete_resource_add_resource_cpp", (DL_FUNC) &_WARDEN_discrete_resource_add_resource_cpp, 2},
    {"_WARDEN_discrete_resource_remove_resource_cpp", (DL_FUNC) &_WARDEN_discrete_resource_remove_resource_cpp, 3},
    {"_WARDEN_discrete_resource_clone_xptrs_cpp", (DL_FUNC) &_WARDEN_discrete_resource_clone_xptrs_cpp, 2},
    {"_WARDEN_rpoisgamma_rcpp", (DL_FUNC) &_WARDEN_rpoisgamma_rcpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_WARDEN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
